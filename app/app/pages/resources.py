from flask import request, abort
from flask_restplus import Resource, fields, Namespace

from app.pages.models import Page
from app.pages.services import PageService
from app.pages.forms import CreateOrUpdatePageForm

ns = Namespace('page', description='Page module')

page_fields = ns.model('Page', {
    'id': fields.String(description='generated by the database'),
    'created': fields.DateTime(description='set once, when the page was created'),
    'modified': fields.DateTime(description='set every time the page is modified'),
    'title': fields.String(description='title of the page'),
    'content': fields.String(description='content of the page'),
    'slug': fields.String(description='automatically generated based on the title'),
})

list_fields = ns.model('PageList', {
    'id': fields.String(description='generated by the database'),
    'title': fields.String(description='title of the page'),
    'slug': fields.String(description='slug of the page'),
})

page_input = ns.model('PageInput', {
    'title': fields.String(description='title of the page'),
    'content': fields.String(description='content of the page')
})


@ns.route('/<string:slug>')
class PageDetail(Resource):

    service = PageService()

    @ns.doc('get_page')
    @ns.response(404, 'Page not found')
    @ns.marshal_with(page_fields)
    def get(self, slug):
        """
        Returns a single page by slug
        """
        page = self.service.get_by_slug(slug)

        if not page:
            abort(404, "Page {} doesn't exist".format(slug))

        return page

    @ns.doc('delete_page')
    @ns.response(404, 'Page not found')
    @ns.response(204, 'Page deleted')
    def delete(self, slug):
        """
        Delete a single page by slug
        """
        page = self.service.get_by_slug(slug)

        if not page:
            abort(404, "Page {} doesn't exist".format(slug))

        self.service.delete(page)

        return {}, 204

    @ns.doc('put_page')
    @ns.expect(page_input)
    @ns.response(400, 'Invalid input')
    @ns.response(404, 'Page not found')
    @ns.marshal_with(page_fields)
    def put(self, slug):
        """
        Update a page by slug
        """
        page = self.service.get_by_slug(slug)

        if not page:
            abort(404, "Page {} doesn't exist".format(slug))

        form = CreateOrUpdatePageForm(data=request.get_json(force=True))

        if not form.validate():
            abort(400, form.errors)

        form.populate_obj(page)
        self.service.save_update(page)

        return page, 200


@ns.route('/')
class PageList(Resource):

    service = PageService()

    @ns.doc('get_pages')
    @ns.marshal_with(list_fields, as_list=True)
    def get(self):
        """
        Returns all the pages
        """
        return self.service.get_all()

    @ns.doc('post_page')
    @ns.expect(page_input)
    @ns.response(400, 'Input invalid')
    @ns.response(409, 'Page already exist')
    @ns.marshal_with(page_fields, code=201)
    def post(self):
        """
        Create a new page
        """
        form = CreateOrUpdatePageForm(data=request.get_json(force=True))

        if not form.validate():
            abort(400, form.errors)

        page = Page(title=form.title.data, content=form.content.data)
        existing_page = self.service.get_by_title(page.title)

        if existing_page:
            abort(409, "Page {} already exist".format(page.title))

        self.service.save_update(page)

        return page, 201
