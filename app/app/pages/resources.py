from flask import Blueprint, request

from flask_restful import Api, Resource
from flask_restful import abort, fields, marshal_with, marshal, reqparse

from app.pages.models import Page
from app.pages.services import PageService
from app.pages.forms import CreateOrUpdatePageForm

page_bp = Blueprint('page_api', __name__)
api = Api(page_bp)

page_fields = {
    'id': fields.Integer,
    'created': fields.DateTime,
    'modified': fields.DateTime,
    'title': fields.String,
    'content': fields.String,
    'slug': fields.String,
}

list_fields = {
    'id': fields.Integer,
    'title': fields.String,
    'slug': fields.String,
}

class PageDetail(Resource):

    service = PageService()

    @marshal_with(page_fields)
    def get(self, slug):
        """
        Returns a single page by slug
        ---
        definitions:
        - schema:
            id: Page
            properties:
                id:
                  type: integer
                  description: Generated by the database
                created:
                  type: string
                  format: date-time
                  description: Set once, when the page has been created
                modified:
                  type: string
                  format: date-time
                  description: Set every time the page is modified
                title:
                  type: string
                  description: Title of the page
                content:
                  type: string
                  description: Content of the page
                slug:
                  type: string
                  description: Automatically generated based on the title
        responses:
          200:
            description: Page response
            schema:
              $ref: '#/definitions/Page'
          404:
            description: Page not found
        parameters:
        - name: slug
          in: path
          description: slug of the page
          required: true
          type: string
        """
        page = self.service.get_by_slug(slug)

        if not page:
            abort(404, error="Page {} doesn't exist".format(slug))

        return page

    def delete(self, slug):
        """
        Delete a single page by slug
        ---
        responses:
          204:
            description: Page has been deleted
          404:
            description: Page not found
        parameters:
        - name: slug
          in: path
          description: slug of the page
          required: true
          type: string
        """
        page = self.service.get_by_slug(slug)

        if not page:
            abort(404, error="Page {} doesn't exist".format(slug))

        self.service.delete(page)

        return {}, 204

    @marshal_with(page_fields)
    def put(self, slug):
        """
        Update a page by slug
        ---
        definitions:
        - schema:
            id: UpdatePage
            properties:
                title:
                    type: string
                    description: title of the page
                content:
                    type: string
                    description: content of the page
        consumes:
          - application/json
        responses:
          200:
            description: Page response
            schema:
              $ref: '#/definitions/Page'
          404:
            description: Page not found
          400:
            description: Input is invalid
        parameters:
        - name: slug
          in: path
          description: slug of the page
          required: true
          type: string
        - name: page
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePage'
        """
        page = self.service.get_by_slug(slug)

        if not page:
            abort(404, error="Page {} doesn't exist".format(slug))

        form = CreateOrUpdatePageForm(data=request.get_json(force=True))

        if not form.validate():
            abort(400, errors=form.errors)

        form.populate_obj(page)
        self.service.save_update(page)

        return page, 200


class PageList(Resource):

    service = PageService()

    # TODO: Use pagination
    @marshal_with(list_fields)
    def get(self):
        """
        Returns all the pages
        ---
        definitions:
        - schema:
            id: PageList
            properties:
                id:
                  type: integer
                  description: Generated by the database
                title:
                  type: string
                  description: Title of the page
                slug:
                  type: string
                  description: Automatically generated based on the title
        responses:
          200:
            description: Page list response
            schema:
              type: array
              items:
                $ref: '#/definitions/PageList'
        """
        return self.service.get_all()

    @marshal_with(page_fields)
    def post(self):
        """
        Create a new page
        ---
        consumes:
          - application/json
        responses:
          201:
            description: Page response
            schema:
              $ref: '#/definitions/Page'
          409:
            description: Page already exist
          400:
            description: Input is invalid
        parameters:
        - name: page
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePage'
        """
        form = CreateOrUpdatePageForm(data=request.get_json(force=True))

        if not form.validate():
            abort(400, errors=form.errors)

        page = Page(title=form.title.data, content=form.content.data)
        existing_page = self.service.get_by_title(page.title)

        if existing_page:
            abort(409, error="Page {} already exist".format(page.title))

        self.service.save_update(page)

        return page, 201

api.add_resource(PageDetail, '/<string:slug>')
api.add_resource(PageList, '/')
