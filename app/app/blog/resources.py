from flask import request, abort
from flask_restplus import Resource, fields, Namespace

from app.blog.models import BlogPost as Post
from app.blog.forms import CreateOrUpdateBlogForm
from app.blog.services import BlogService

ns = Namespace('blog', description='Blog module')

post_fields = ns.model('Blog', {
    'id': fields.String(description='generated by the database'),
    'created': fields.DateTime(description='set once, when the blog post was created'),
    'modified': fields.DateTime(description='set every time the blog post is modified'),
    'title': fields.String(description='title of the blog post'),
    'content': fields.String(description='content of the blog post'),
    'slug': fields.String(description='automatically generated based on the title'),
    'published': fields.Boolean(description='indicates whether the blog post is published or not')
})

list_fields = ns.model('BlogList', {
    'id': fields.String(description='generated by the database'),
    'title': fields.String(desciption='title of the blog post'),
    'slug': fields.String(description='slug of the blog post'),
})

post_input = ns.model('BlogInput', {
    'title': fields.String(description='title of the blog post'),
    'content': fields.String(description='content of the blog post')
})


@ns.route('/<string:slug>')
class BlogPostDetail(Resource):
    service = BlogService()

    @ns.doc('get_blog')
    @ns.response(404, 'Blog post not found')
    @ns.marshal_with(post_fields)
    def get(self, slug):
        """
        Returns a single blog post by slug
        """
        post = self.service.get_by_slug(slug)

        if not post:
            abort(404, "Post {} doesn't exist".format(slug))

        return post

    @ns.doc('delete_blog')
    @ns.response(404, 'Blog post not found')
    @ns.response(204, 'Blog post deleted')
    def delete(self, slug):
        """
        Delete a single blog post by slug
        """
        post = self.service.get_by_slug(slug)

        if not post:
            abort(404, "Post {} doesn't exist".format(slug))

        self.service.delete(post)

        return {}, 204

    @ns.doc('put_blog')
    @ns.expect(post_input)
    @ns.response(400, 'Invalid input')
    @ns.response(404, 'Blog post not found')
    @ns.marshal_with(post_fields)
    def put(self, slug):
        """
        Update a blog post by slug
        """
        post = self.service.get_by_slug(slug)

        if not post:
            abort(404, "Post {} doesn't exist".format(slug))

        form = CreateOrUpdateBlogForm(data=request.get_json(force=True))

        if not form.validate():
            abort(400, form.errors)

        form.populate_obj(post)
        self.service.save_update(post)

        return post, 200


@ns.route('/')
class BlogPostList(Resource):
    service = BlogService()

    @ns.doc('get_blogs')
    @ns.marshal_with(list_fields, as_list=True)
    def get(self):
        """
        Returns all the blog posts
        """
        return self.service.get_all()

    @ns.doc('post_blog')
    @ns.expect(post_input)
    @ns.response(400, 'Input invalid')
    @ns.response(409, 'Blog post already exist')
    @ns.marshal_with(post_fields, code=201)
    def post(self):
        """
        Create a new blog post
        """
        form = CreateOrUpdateBlogForm(data=request.get_json(force=True))

        if not form.validate():
            abort(400, form.errors)

        post = Post(title=form.title.data, content=form.content.data)

        existing_post = self.service.get_by_title(post.title)
        if existing_post:
            abort(409, "Post {} already exist".format(post.title))

        self.service.save_update(post)

        return post, 201
